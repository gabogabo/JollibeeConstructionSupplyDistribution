/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Tracking;



import java.awt.*;
import java.awt.event.*;
import java.util.EventObject;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.CellEditorListener;
import javax.swing.table.*;

/**
 *
 * @author Kristian
 */
public class TrackTable extends javax.swing.JPanel implements TableCellRenderer, TableCellEditor,ActionListener, MouseListener {

    /**
     * Creates new form TrackTable
     */
    private JTable trTable;
    private Action action;
    private int mnemonic;
    private Border orgBorder;
    private Border fBorder;
    
    private JButton rrButton;
    private JButton edButton;
    private Object edValue;
    private boolean isColumnEditor;
    
    public TrackTable(JTable table, Action action, int column) {
        //initComponents();
        
        this.trTable = table;
        this.action = action;
        
        rrButton = new JButton();
        edButton = new JButton();
        edButton.addActionListener(this);
        orgBorder = edButton.getBorder();
        setFocusBorder( new LineBorder(Color.BLACK));
        
        TableColumnModel cModel = table.getColumnModel();
        cModel.getColumn(column).setCellRenderer( this );
        cModel.getColumn(column).setCellEditor( this );
        table.addMouseListener( this );
    }
    
    public Border getFocusBorder(){
        return fBorder;
    }
    
    public void setFocusBorder(Border focusBorder){
        this.fBorder = focusBorder;
        edButton.setBorder( fBorder );
    }
    
    public int getMnemonic(){
        return mnemonic;
    }
    
    public void setMnemonic(int mnemonic){
        this.mnemonic = mnemonic;
        rrButton.setMnemonic(mnemonic);
        edButton.setMnemonic(mnemonic);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables

    @Override
    public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
        if (isSelected)
		{
			rrButton.setForeground(table.getSelectionForeground());
	 		rrButton.setBackground(table.getSelectionBackground());
		}
		else
		{
			rrButton.setForeground(table.getForeground());
			rrButton.setBackground(UIManager.getColor("Button.background"));
		}

		if (hasFocus)
		{
			rrButton.setBorder( fBorder );
		}
		else
		{
			rrButton.setBorder( orgBorder );
		}

//		renderButton.setText( (value == null) ? "" : value.toString() );
		if (value == null)
		{
			rrButton.setText( "" );
			rrButton.setIcon( null );
		}
		else if (value instanceof Icon)
		{
			rrButton.setText( "" );
			rrButton.setIcon( (Icon)value );
		}
		else
		{
			rrButton.setText( value.toString() );
			rrButton.setIcon( null );
		}

		return rrButton; //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public Component getTableCellEditorComponent(JTable table, Object value, boolean isSelected, int row, int column) {
        //To change body of generated methods, choose Tools | Templates.
        if(value == null){
            edButton.setText("");
            edButton.setIcon(null);
        }
        else if(value instanceof Icon){
            edButton.setText("");
            edButton.setIcon( (Icon)value);
        }
        else{
            edButton.setText( "" );
            edButton.setIcon(null);
        }
        this.edValue = value;
        return edButton;
    }
    

    @Override
    public Object getCellEditorValue() {
        //To change body of generated methods, choose Tools | Templates.
        return edValue;
    }

    @Override
    public boolean isCellEditable(EventObject anEvent) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean shouldSelectCell(EventObject anEvent) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public boolean stopCellEditing() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void cancelCellEditing() {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void addCellEditorListener(CellEditorListener l) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void removeCellEditorListener(CellEditorListener l) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseClicked(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mousePressed(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseReleased(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseEntered(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    @Override
    public void mouseExited(MouseEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }

    
}
